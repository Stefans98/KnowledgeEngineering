
FUNCTION_BLOCK sablon

VAR_INPUT               // ulazne varijable
	attack_vector_AV : REAL;
	attack_complexity_AC : REAL;
	privileges_required_PR : REAL;
	user_interaction_UI : REAL;
	scope_S : REAL;
	confidentiality_C : REAL;
	integrity_I : REAL;
	availability_A : REAL;
	exploit_code_maturity_E : REAL;
	remediation_level_RL : REAL;
	report_confidence_RC : REAL;
END_VAR

VAR_OUTPUT              // izlazne varijable
	risk_of_vulnerability : REAL;
END_VAR

FUZZIFY attack_vector_AV
	TERM physical := (0, 0) (0.20, 1) (0.55, 0);
	TERM local := (0.20, 0) (0.55, 1) (0.62, 0);
	TERM adjacent := (0.55, 0) (0.62, 1) (0.85, 0);
	TERM network := (0.62, 0) (0.85, 1) (1, 0);
END_FUZZIFY

FUZZIFY attack_complexity_AC
	TERM high := (0, 0) (0.44, 1) (0.77, 0);
	TERM low := (0.44, 0) (0.77, 1) (1, 0);
END_FUZZIFY

FUZZIFY privileges_required_PR
	TERM high := (0, 0) (0.27, 1) (0.62, 0);
	TERM low := (0.27, 0) (0.62, 1) (0.85, 0);
	TERM none := (0.62, 0) (0.85, 1) (1, 0);
END_FUZZIFY

FUZZIFY user_interaction_UI
	TERM required := (0, 0) (0.62, 1) (0.85, 0);
	TERM none := (0.62, 0) (0.85, 1) (1, 0);
END_FUZZIFY

FUZZIFY scope_S
	TERM changed := (0, 0) (0.4, 1) (0.6, 0);
	TERM unchanged := (0.4, 0) (0.6, 1) (1, 0);
END_FUZZIFY

FUZZIFY confidentiality_C
	TERM none := (0, 0) (0.1, 1) (0.22, 0);
	TERM low := (0.1, 0) (0.22, 1) (0.56, 0);
	TERM high := (0.22, 0) (0.56, 1) (1, 0);
END_FUZZIFY

FUZZIFY integrity_I
	TERM none := (0, 0) (0.1, 1) (0.22, 0);
	TERM low := (0.1, 0) (0.22, 1) (0.56, 0);
	TERM high := (0.22, 0) (0.56, 1) (1, 0);
END_FUZZIFY

FUZZIFY availability_A
	TERM none := (0, 0) (0.1, 1) (0.22, 0);
	TERM low := (0.1, 0) (0.22, 1) (0.56, 0);
	TERM high := (0.22, 0) (0.56, 1) (1, 0);
END_FUZZIFY

FUZZIFY exploit_code_maturity_E
	TERM unproven := (0, 0) (0.91, 1) (0.94, 0);
	TERM proof_of_concept := (0.91, 0) (0.94, 1) (0.97, 0);
	TERM functional := (0.94, 0) (0.97, 1) (1, 0);
	TERM high := (0.97, 0) (1, 1);
	TERM not_defined := (0.97, 0) (1, 1);
END_FUZZIFY

FUZZIFY remediation_level_RL
    TERM official_fix := (0, 0) (0.95, 1) (0.96, 0);
    TERM temporary_fix := (0.95, 0) (0.96, 1) (0.97, 0);
    TERM workaround := (0.96, 0) (0.97, 1) (1, 0);
    TERM unavailable := (0.97, 0) (1, 1);
    TERM not_defined := (0.97, 0) (1, 1);
END_FUZZIFY

FUZZIFY report_confidence_RC
	TERM unknown := (0, 0) (0.92, 1) (0.96, 0);
	TERM reasonable := (0.92, 0) (0.96, 1) (1, 0);
	TERM confirmed := (0.96, 0) (1, 1);
	TERM not_defined := (0.96, 0) (1, 1);
END_FUZZIFY

DEFUZZIFY risk_of_vulnerability
	TERM none := (0,1) (0.5,1) (1,0);
	TERM low := (0,0) (1,1) (3, 1) (4, 0);
	TERM medium := (3,0) (4,1) (6,1) (7, 0);
	TERM high := (6,0) (7,1) (9,1) (10, 0);
	TERM critical := (9,0) (9.5, 1) (10, 1);
	METHOD : COG;		// 'Center Of Gravity' odn. centar mase (koristi se i MM odn. mean max)
	DEFAULT := 0;		// podrazumevana vrednost (ukoliko nijedno pravilo nije aktivirano)
END_DEFUZZIFY

RULEBLOCK blok1
	AND : MIN;			// za konjunkciju se koristi minimum (samim tim sa za disjunkciju koristi maksimum)
	ACT : MIN;			// za zakljuƒçivanje (implikaciju) je izabran minimum (Mamdani implikacija) (osim MIN koristi se i PROD)
	ACCU : MAX;			// za kompoziciju je izabran maksimum (osim MAX koristi se i SUM)

	RULE 1 : IF attack_vector_AV IS physical THEN risk_of_vulnerability IS low;
	RULE 2 : IF attack_vector_AV IS local THEN risk_of_vulnerability IS medium;
	RULE 3 : IF attack_vector_AV IS adjacent THEN risk_of_vulnerability IS medium;
	RULE 4 : IF attack_vector_AV IS network THEN risk_of_vulnerability IS high;
	
	RULE 5 : IF attack_complexity_AC IS high THEN risk_of_vulnerability IS medium;
	RULE 6 : IF attack_complexity_AC IS low THEN risk_of_vulnerability IS high;
	
	RULE 7 : IF privileges_required_PR IS high THEN risk_of_vulnerability IS low;
	RULE 8 : IF privileges_required_PR IS low THEN risk_of_vulnerability IS medium;
	RULE 9 : IF privileges_required_PR IS none THEN risk_of_vulnerability IS high;
	
	RULE 10 : IF user_interaction_UI IS required THEN risk_of_vulnerability IS medium;
	RULE 11 : IF user_interaction_UI IS none THEN risk_of_vulnerability IS high;

	RULE 12 : IF scope_S IS changed THEN risk_of_vulnerability IS medium;
	RULE 13 : IF scope_S IS unchanged THEN risk_of_vulnerability IS medium;

	RULE 14 : IF confidentiality_C IS none THEN risk_of_vulnerability IS none;
	RULE 15 : IF confidentiality_C IS low THEN risk_of_vulnerability IS low;
	RULE 16 : IF confidentiality_C IS high THEN risk_of_vulnerability IS medium;
	
	RULE 17 : IF integrity_I IS none THEN risk_of_vulnerability IS none;
	RULE 18 : IF integrity_I IS low THEN risk_of_vulnerability IS low;
	RULE 19 : IF integrity_I IS high THEN risk_of_vulnerability IS medium;
	
	RULE 20 : IF availability_A IS none THEN risk_of_vulnerability IS none;
	RULE 21 : IF availability_A IS low THEN risk_of_vulnerability IS low;
	RULE 22 : IF availability_A IS high THEN risk_of_vulnerability IS medium;

	RULE 23 : IF exploit_code_maturity_E IS unproven THEN risk_of_vulnerability IS low;
	RULE 24 : IF exploit_code_maturity_E IS proof_of_concept THEN risk_of_vulnerability IS medium;
	RULE 25 : IF exploit_code_maturity_E IS functional THEN risk_of_vulnerability IS high;
	RULE 26 : IF exploit_code_maturity_E IS high THEN risk_of_vulnerability IS critical;
	RULE 27 : IF exploit_code_maturity_E IS not_defined THEN risk_of_vulnerability IS critical;

	RULE 28 : IF remediation_level_RL IS official_fix THEN risk_of_vulnerability IS low;
	RULE 29 : IF remediation_level_RL IS temporary_fix THEN risk_of_vulnerability IS medium;
	RULE 30 : IF remediation_level_RL IS workaround THEN risk_of_vulnerability IS high;
	RULE 31 : IF remediation_level_RL IS unavailable THEN risk_of_vulnerability IS critical;
	RULE 32 : IF remediation_level_RL IS not_defined THEN risk_of_vulnerability IS critical;

	RULE 33 : IF report_confidence_RC IS unknown THEN risk_of_vulnerability IS medium;
	RULE 34 : IF report_confidence_RC IS reasonable THEN risk_of_vulnerability IS high;
	RULE 35 : IF report_confidence_RC IS confirmed THEN risk_of_vulnerability IS critical;
	RULE 36 : IF report_confidence_RC IS not_defined THEN risk_of_vulnerability IS critical;
	
END_RULEBLOCK

END_FUNCTION_BLOCK

