import React, { Component } from "react";
import {
  FormControl,
  FormControlLabel,
  FormLabel,
  Grid,
  Radio,
  RadioGroup,
} from "@material-ui/core";
import VulnerabilityCalculatorService from "../services/VulnerabilityCalculatorService";

export default class VulnerabilityCalculator extends Component {
  constructor(props) {
    super(props);
    this.messagesStartRef = React.createRef();
    this.state = {
      attackVector: "0",
      attackComplexity: "0",
      privilegesRequired: "0",
      userInteraction: "0",
      scope: "0",
      confidentiality: "0",
      integrity: "0",
      availability: "0",
      vulnerabilityRisk: 0.0,
    };
  }

  handleChangeAttackVector = (event) => {
    this.setState({ attackVector: event.target.value });
  };

  handleChangeAttackComplexity = (event) => {
    this.setState({ attackComplexity: event.target.value });
  };

  handleChangePrivilegesRequired = (event) => {
    this.setState({ privilegesRequired: event.target.value });
  };

  handleChangeUserInteraction = (event) => {
    this.setState({ userInteraction: event.target.value });
  };

  handleChangeScope = (event) => {
    this.setState({ scope: event.target.value });
  };

  handleChangeConfidentiality = (event) => {
    this.setState({ confidentiality: event.target.value });
  };

  handleChangeIntegrity = (event) => {
    this.setState({ integrity: event.target.value });
  };

  handleChangeAvailability = (event) => {
    this.setState({ availability: event.target.value });
  };

  getScoreColor = () => {
    if (this.state.vulnerabilityRisk < 1) {
      return "#0da435";
    } else if (this.state.vulnerabilityRisk < 3.5) {
      return "#ffb200";
    } else if (this.state.vulnerabilityRisk < 6.5) {
      return "#ff7300";
    } else if (this.state.vulnerabilityRisk < 9) {
      return "#ff3700";
    } else {
      return "#cf0000";
    }
  };

  getScoreCategory = () => {
    if (this.state.vulnerabilityRisk < 1) {
      return "None";
    } else if (this.state.vulnerabilityRisk < 3.5) {
      return "Low";
    } else if (this.state.vulnerabilityRisk < 6.5) {
      return "Medium";
    } else if (this.state.vulnerabilityRisk < 9) {
      return "High";
    } else {
      return "Critical";
    }
  };

  calculateVulnerability = () => {
    VulnerabilityCalculatorService.calculateVulnerability(
      this.state.attackVector,
      this.state.attackComplexity,
      this.state.privilegesRequired,
      this.state.userInteraction,
      this.state.scope,
      this.state.confidentiality,
      this.state.integrity,
      this.state.availability
    )
      .then((res) => {
        return res.json();
      })
      .then((data) => {
        this.setState(
          {
            vulnerabilityRisk: data.toFixed(2),
          },
          () => {
            this.scrollToTop();
          }
        );
      });
  };

  scrollToTop = () => {
    this.messagesStartRef.current.scrollIntoView({ behavior: "smooth" });
  };

  render() {
    return (
      <div>
        <div
          class="bg-white rounded shadow-sm p-4 mb-5 rating-review-select-page"
          style={{ maxWidth: "100%", overflow: "hidden" }}
          ref={this.messagesStartRef}
        >
          <h3 style={{ textAlign: "center", color: "#74767a" }}>
            Vulnerability calculator
          </h3>
          <br />
          <div
            style={{
              display: "flex",
              marginLeft: "532px",
              background: this.getScoreColor(),
              width: "300px",
              borderRadius: "5px",
              padding: "5px",
            }}
          >
            <h4
              style={{
                textAlign: "center",
                width: "300px",
                color: "white",
              }}
            >
              Score: {this.state.vulnerabilityRisk} ({this.getScoreCategory()})
            </h4>
          </div>

          <br />
          <br />
          <Grid container spacing="5">
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">Attack vector</FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.attackVector}
                  onChange={this.handleChangeAttackVector}
                >
                  <FormControlLabel
                    value="0"
                    control={<Radio />}
                    label="Network"
                  />
                  <FormControlLabel
                    value="1"
                    control={<Radio />}
                    label="Adjacent"
                  />
                  <FormControlLabel
                    value="2"
                    control={<Radio />}
                    label="Local"
                  />
                  <FormControlLabel
                    value="3"
                    control={<Radio />}
                    label="Physical"
                  />
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">Attack complexity</FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.attackComplexity}
                  onChange={this.handleChangeAttackComplexity}
                >
                  <FormControlLabel value="0" control={<Radio />} label="Low" />
                  <FormControlLabel
                    value="1"
                    control={<Radio />}
                    label="High"
                  />
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">Privileges required</FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.privilegesRequired}
                  onChange={this.handleChangePrivilegesRequired}
                >
                  <FormControlLabel
                    value="0"
                    control={<Radio />}
                    label="None"
                  />
                  <FormControlLabel value="1" control={<Radio />} label="Low" />
                  <FormControlLabel
                    value="2"
                    control={<Radio />}
                    label="High"
                  />
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">User interaction</FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.userInteraction}
                  onChange={this.handleChangeUserInteraction}
                >
                  <FormControlLabel
                    value="0"
                    control={<Radio />}
                    label="None"
                  />
                  <FormControlLabel
                    value="1"
                    control={<Radio />}
                    label="Required"
                  />
                </RadioGroup>
              </FormControl>
            </Grid>
          </Grid>
          <Grid container spacing="5">
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">Scope</FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.scope}
                  onChange={this.handleChangeScope}
                >
                  <FormControlLabel
                    value="0"
                    control={<Radio />}
                    label="Unchanged"
                  />
                  <FormControlLabel
                    value="1"
                    control={<Radio />}
                    label="Changed"
                  />
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">Confidentiality</FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.confidentiality}
                  onChange={this.handleChangeConfidentiality}
                >
                  <FormControlLabel
                    value="0"
                    control={<Radio />}
                    label="None"
                  />
                  <FormControlLabel value="1" control={<Radio />} label="Low" />
                  <FormControlLabel
                    value="2"
                    control={<Radio />}
                    label="High"
                  />
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">Integrity</FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.integrity}
                  onChange={this.handleChangeIntegrity}
                >
                  <FormControlLabel
                    value="0"
                    control={<Radio />}
                    label="None"
                  />
                  <FormControlLabel value="1" control={<Radio />} label="Low" />
                  <FormControlLabel
                    value="2"
                    control={<Radio />}
                    label="High"
                  />
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">Availability</FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.availability}
                  onChange={this.handleChangeAvailability}
                >
                  <FormControlLabel
                    value="0"
                    control={<Radio />}
                    label="None"
                  />
                  <FormControlLabel value="1" control={<Radio />} label="Low" />
                  <FormControlLabel
                    value="2"
                    control={<Radio />}
                    label="High"
                  />
                </RadioGroup>
              </FormControl>
            </Grid>
          </Grid>
          <div class="graph-star-rating-footer text-center mt-5 mb-3">
            <button
              type="button"
              onClick={this.calculateVulnerability}
              class="btn btn-outline-primary btn-sm"
              style={{ width: "200px", fontSize: "17px" }}
            >
              Calculate vulnerability
            </button>
          </div>
        </div>
      </div>
    );
  }
}
