import TextField from "@material-ui/core/TextField";
import Autocomplete from "@material-ui/lab/Autocomplete";
import React, { Component } from "react";
import {
  FormControl,
  FormControlLabel,
  FormLabel,
  Grid,
  Radio,
  RadioGroup,
  Typography,
} from "@material-ui/core";
import { Button } from "react-bootstrap";
import { Label } from "@material-ui/icons";
import VulnerabilityCalculatorService from "../services/VulnerabilityCalculatorService";

export default class VulnerabilityCalculator extends Component {
  constructor(props) {
    super(props);
    this.state = {
      attackVector : '0',
      attackComplexity : '0',
      privilegesRequired : '0',
      userInteraction : '0',
      scope : '0',
      confidentiality : '0',
      integrity : '0',
      availability : '0',
      vulnerabilityRisk : 0.0
    }
  }

  handleChangeAttackVector = (event) => {
    this.setState({ attackVector: event.target.value });
  };

  handleChangeAttackComplexity = (event) => {
    this.setState({ attackComplexity: event.target.value });
  };

  handleChangePrivilegesRequired = (event) => {
    this.setState({ privilegesRequired: event.target.value });
  };

  handleChangeUserInteraction = (event) => {
    this.setState({ userInteraction: event.target.value });
  };

  handleChangeScope = (event) => {
    this.setState({ scope: event.target.value });
  };

  handleChangeConfidentiality = (event) => {
    this.setState({ confidentiality: event.target.value });
  };

  handleChangeIntegrity = (event) => {
    this.setState({ integrity: event.target.value });
  };

  handleChangeAvailability = (event) => {
    this.setState({ availability: event.target.value });
  };

  getScoreColor = () => {
    if (this.state.vulnerabilityRisk < 1) {
      return '#0da435';
    } else if (this.state.vulnerabilityRisk < 3.5) {
      return '#ffb200';
    } else if (this.state.vulnerabilityRisk < 6.5) {
      return '#ff7300';
    } else if (this.state.vulnerabilityRisk < 9) {
      return '#ff3700';
    } else {
      return '#cf0000';
    }
  }

  getScoreCategory = () => {
    if (this.state.vulnerabilityRisk < 1) {
      return 'None';
    } else if (this.state.vulnerabilityRisk < 3.5) {
      return 'Low';
    } else if (this.state.vulnerabilityRisk < 6.5) {
      return 'Medium';
    } else if (this.state.vulnerabilityRisk < 9) {
      return 'High';
    } else {
      return 'Critical';
    }
  }

  calculateVulnerability = () => {
    VulnerabilityCalculatorService.calculateVulnerability(this.state.attackVector, this.state.attackComplexity, this.state.privilegesRequired,
      this.state.userInteraction, this.state.scope, this.state.confidentiality, this.state.integrity, this.state.availability)
      .then((res) => {
        return res.json();
      })
      .then((data) => {
        this.setState({
          vulnerabilityRisk : data.toFixed(2)
        });
      });
  }

  render() {
    return (
    <div>
      <div
          class="bg-white rounded shadow-sm p-4 mb-5 rating-review-select-page"
          style={{ maxWidth: "100%",
                   overflow: "hidden"}}
        >
          <h3 style={{ textAlign : "center", color: "#74767a" }}>Vulnerability calculator</h3>
          <br />
          <div style={{display : "flex"}}>
            <Button onClick={this.calculateVulnerability}>Calculate vulnerability</Button>
            <div style={{ marginLeft : "auto", marginRight : "180px", display : "flex", background : this.getScoreColor(), width : "300px", borderRadius : "5px"}}>
              <h4 style={{ marginLeft : "auto", marginRight : "30px",  marginLeft : "30px", color: "white"}}>Score:</h4>
              <h4 style={{ color: "white", marginRight : "10px"}}>{this.state.vulnerabilityRisk}</h4>
              <h4 style={{ color: "white", marginRight : "30px"}}>({this.getScoreCategory()})</h4>
            </div>
          </div>
          <br/>
          <br />
          <Grid container spacing="5">
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">
                  Attack vector
                </FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.attackVector}
                  onChange={this.handleChangeAttackVector}
                >
                  <FormControlLabel value="0" control={<Radio />} label="Network" />
                  <FormControlLabel value="1" control={<Radio />} label="Adjacent" />
                  <FormControlLabel value="2" control={<Radio />} label="Local" />
                  <FormControlLabel value="3" control={<Radio />} label="Physical" />
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">
                  Attack complexity
                </FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.attackComplexity}
                  onChange={this.handleChangeAttackComplexity}
                >
                  <FormControlLabel value="0" control={<Radio />} label="Low" />
                  <FormControlLabel value="1" control={<Radio />} label="High" />
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">
                  Privileges required
                </FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.privilegesRequired}
                  onChange={this.handleChangePrivilegesRequired}
                >
                  <FormControlLabel value="0" control={<Radio />} label="None" />
                  <FormControlLabel value="1" control={<Radio />} label="Low" />
                  <FormControlLabel value="2" control={<Radio />} label="High" />
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">
                  User interaction
                </FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.userInteraction}
                  onChange={this.handleChangeUserInteraction}
                >
                  <FormControlLabel value="0" control={<Radio />} label="None" />
                  <FormControlLabel value="1" control={<Radio />} label="Required" />
                </RadioGroup>
              </FormControl>
            </Grid>
          </Grid>
          <Grid container spacing="5">
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">
                  Scope
                </FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.scope}
                  onChange={this.handleChangeScope}
                >
                  <FormControlLabel value="0" control={<Radio />} label="Unchanged" />
                  <FormControlLabel value="1" control={<Radio />} label="Changed" />
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">
                  Confidentiality
                </FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.confidentiality}
                  onChange={this.handleChangeConfidentiality}
                >
                  <FormControlLabel value="0" control={<Radio />} label="None" />
                  <FormControlLabel value="1" control={<Radio />} label="Low" />
                  <FormControlLabel value="2" control={<Radio />} label="High" />
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">
                  Integrity
                </FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.integrity}
                  onChange={this.handleChangeIntegrity}
                >
                  <FormControlLabel value="0" control={<Radio />} label="None" />
                  <FormControlLabel value="1" control={<Radio />} label="Low" />
                  <FormControlLabel value="2" control={<Radio />} label="High" />
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs>
              <FormControl component="fieldset">
                <FormLabel component="legend">
                  Availability
                </FormLabel>
                <RadioGroup
                  aria-label="networkDisruptionOrDDoS"
                  name="networkDisruptionOrDDoS"
                  value={this.state.availability}
                  onChange={this.handleChangeAvailability}
                >
                  <FormControlLabel value="0" control={<Radio />} label="None" />
                  <FormControlLabel value="1" control={<Radio />} label="Low" />
                  <FormControlLabel value="2" control={<Radio />} label="High" />
                </RadioGroup>
              </FormControl>
            </Grid>
          </Grid>
      </div>
        
    </div>
    );
  }
}
