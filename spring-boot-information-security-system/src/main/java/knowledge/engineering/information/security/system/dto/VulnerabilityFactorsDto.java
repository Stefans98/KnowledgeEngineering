package knowledge.engineering.information.security.system.dto;

import knowledge.engineering.information.security.system.dto.enums.*;
import knowledge.engineering.information.security.system.model.VulnerabilityFactors;

public class VulnerabilityFactorsDto {
    private AttackVector attackVector;
    private AttackComplexity attackComplexity;
    private PrivilegesRequired privilegesRequired;
    private UserInteraction userInteraction;
    private Scope scope;
    private Level confidentiality;
    private Level integrity;
    private Level availability;

    public VulnerabilityFactorsDto() {
    }

    public VulnerabilityFactorsDto(AttackVector attackVector, AttackComplexity attackComplexity, PrivilegesRequired privilegesRequired,
                                   UserInteraction userInteraction, Scope scope, Level confidentiality, Level integrity, Level availability) {
        this.attackVector = attackVector;
        this.attackComplexity = attackComplexity;
        this.privilegesRequired = privilegesRequired;
        this.userInteraction = userInteraction;
        this.scope = scope;
        this.confidentiality = confidentiality;
        this.integrity = integrity;
        this.availability = availability;
    }

    public AttackVector getAttackVector() {
        return attackVector;
    }

    public void setAttackVector(AttackVector attackVector) {
        this.attackVector = attackVector;
    }

    public AttackComplexity getAttackComplexity() {
        return attackComplexity;
    }

    public void setAttackComplexity(AttackComplexity attackComplexity) {
        this.attackComplexity = attackComplexity;
    }

    public PrivilegesRequired getPrivilegesRequired() {
        return privilegesRequired;
    }

    public void setPrivilegesRequired(PrivilegesRequired privilegesRequired) {
        this.privilegesRequired = privilegesRequired;
    }

    public UserInteraction getUserInteraction() {
        return userInteraction;
    }

    public void setUserInteraction(UserInteraction userInteraction) {
        this.userInteraction = userInteraction;
    }

    public Scope getScope() {
        return scope;
    }

    public void setScope(Scope scope) {
        this.scope = scope;
    }

    public Level getConfidentiality() {
        return confidentiality;
    }

    public void setConfidentiality(Level confidentiality) {
        this.confidentiality = confidentiality;
    }

    public Level getIntegrity() {
        return integrity;
    }

    public void setIntegrity(Level integrity) {
        this.integrity = integrity;
    }

    public Level getAvailability() {
        return availability;
    }

    public void setAvailability(Level availability) {
        this.availability = availability;
    }

    public double getAttackVectorDouble() {
        if (this.attackVector == AttackVector.PHYSICAL) {
            return 0.2;
        } else if (this.attackVector == AttackVector.LOCAL) {
            return 0.55;
        } else if (this.attackVector == AttackVector.LOCAL) {
            return 0.62;
        } else {
            return 0.85;
        }
    }

    public double getAttackComplexityDouble() {
        if (this.attackComplexity == AttackComplexity.LOW) {
            return 0.77;
        } else {
            return 0.44;
        }
    }

    public double getPrivilegesRequiredDouble() {
        if (this.privilegesRequired == PrivilegesRequired.HIGH) {
            return 0.27;
        } else if (this.privilegesRequired == PrivilegesRequired.LOW) {
            return 0.62;
        } else {
            return 0.85;
        }
    }

    public double getUserInteractionDouble() {
        if (this.userInteraction == UserInteraction.NONE) {
            return 0.85;
        } else {
            return 0.62;
        }
    }

    public double getScopeDouble() {
        if (this.scope == Scope.UNCHANGED) {
            return 0.4;
        } else {
            return 0.6;
        }
    }

    public double getConfidentialityDouble() {
        if (this.confidentiality == Level.HIGH) {
            return 0.56;
        } else if (this.confidentiality == Level.LOW) {
            return 0.22;
        } else {
            return 0.1;
        }
    }

    public double getIntegrityDouble() {
        if (this.integrity == Level.HIGH) {
            return 0.56;
        } else if (this.integrity == Level.LOW) {
            return 0.22;
        } else {
            return 0.1;
        }
    }

    public double getAvailabilityDouble() {
        if (this.availability == Level.HIGH) {
            return 0.56;
        } else if (this.availability == Level.LOW) {
            return 0.22;
        } else {
            return 0.1;
        }
    }

    public VulnerabilityFactors convertToVulnerabilityFactors() {
        VulnerabilityFactors retVal = new VulnerabilityFactors();
        retVal.setAttackComplexity(this.getAttackComplexityDouble());
        retVal.setAttackVector(this.getAttackVectorDouble());
        retVal.setPrivilegesRequired(this.getPrivilegesRequiredDouble());
        retVal.setUserInteraction(this.getUserInteractionDouble());
        retVal.setConfidentiality(this.getConfidentialityDouble());
        retVal.setIntegrity(this.getIntegrityDouble());
        retVal.setAvailability(this.getAvailabilityDouble());
        return retVal;
    }
}
